{"version":3,"file":"static/js/81.328da9fe.chunk.js","mappings":"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","sources":["ValidationSchema.js","components/Userform.js","Pages/Addandupdate.js"],"sourcesContent":["import * as Yup from \"yup\";\n\nexport const validationSchema = Yup.object().shape({\n    name: Yup.string()\n      .min(2, \"Enter a valid name\")\n      .max(30, \"Too long name\")\n      .required(\"Required field\"),\n    email: Yup.string()\n      .email(\"Enter a valid mail id\")\n      .required(\"Required field\"),\n    mobile: Yup.string()\n      .min(10, \"Enter a valid number\")\n      .required(\"Required field\"),\n    username: Yup.string()\n      .min(8, \"Username is not valid\")\n      .required(\"Required field\"),\n    roleKey: Yup.string().required(\"Required field\"),\n    password: Yup.string()\n      .required(\"Required field\")\n      .min(8, \"Password should be 8 characters long\"),\n  });","import React from \"react\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport { validationSchema } from \"../ValidationSchema\";\n\nfunction Userform({ userobj, onSubmit, update }) {\n  return (\n    <div className=\"user-form\">\n      <div className=\"page-title\">\n        <h3>{update ? \"Update record\" : \"Add record\"}</h3>\n      </div>\n      <Formik\n        initialValues={userobj}\n        onSubmit={onSubmit}\n        validationSchema={validationSchema}\n      >\n        {(props) => (\n          <Form>\n            <div className=\"form-group\">\n              <label htmlFor=\"inputAddress\">Name:</label>\n              <Field\n                type=\"text\"\n                className=\"form-control\"\n                id=\"inputAddress\"\n                name=\"name\"\n                placeholder=\"Please enter your name\"\n              />\n              <ErrorMessage component=\"div\" class=\"error\" name=\"name\"/>\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"inputAddress2\">Email: </label>\n              <Field\n                type=\"text\"\n                className=\"form-control\"\n                id=\"inputAddress2\"\n                name=\"email\"\n                placeholder=\"Enter your email address\"\n              />\n              <ErrorMessage component=\"div\" class=\"error\" name=\"email\"/>\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"inputAddress2\">Username: </label>\n              <Field\n                type=\"text\"\n                className=\"form-control\"\n                id=\"inputAddress2\"\n                name=\"username\"\n                placeholder=\"Enter your username\"\n              />\n              <ErrorMessage component=\"div\" class=\"error\" name=\"username\"/>\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"inputAddress2\">Mobile: </label>\n              <Field\n                type=\"number\"\n                className=\"form-control\"\n                id=\"inputAddress2\"\n                name=\"mobile\"\n                placeholder=\"Enter your number\"\n              />\n              <ErrorMessage component=\"div\" class=\"error\" name=\"mobile\"/>\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"inputAddress2\">RoleKey: </label>\n              <Field as=\"select\" className=\"form-control\" name=\"roleKey\">\n                <option value=\"Admin\">Admin</option>\n                <option value=\"User\">User</option>\n                <option value=\"Operator\">Operator</option>\n              </Field>\n              <ErrorMessage component=\"div\" class=\"error\" name=\"roleKey\"/>\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"inputAddress2\">Password: </label>\n              <Field\n                type=\"password\"\n                className=\"form-control\"\n                id=\"inputAddress2\"\n                name=\"password\"\n                placeholder=\"Enter your password\"\n              />\n              <ErrorMessage component=\"div\" class=\"error\" name=\"password\"/>\n            </div>\n            <div className=\"user-form-btn\">\n              <button type=\"submit\" className=\"btn btn-primary\">\n                Submit\n              </button>\n            </div>\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n}\n\nexport default Userform;\n","import React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { addUser, updateUser } from \"../Reducer\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useParams } from \"react-router-dom\";\nimport Userform from \"../components/Userform\";\n\nfunction Addandupdate() {\n  const { id } = useParams();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const users = useSelector((state) => state.users.users);\n  const [update, setUpdate] = useState(false);\n  const [userobj, setUserObj] = useState({\n    name: \"\",\n    email: \"\",\n    username: \"\",\n    mobile: \"\",\n    roleKey: \"\",\n    password: \"\",\n  });\n\n  useEffect(() => {\n    if (id) {\n      const foundUser = users.find((user) => user.id == id);\n      if (foundUser) {\n        userobj.name = foundUser.name;\n        userobj.email = foundUser.email;\n        userobj.username = foundUser.username;\n        userobj.mobile = foundUser.mobile;\n        userobj.roleKey = foundUser.roleKey;\n        setUpdate(true);\n      } else {\n        navigate(\"/\");\n      }\n    } else {\n      setUpdate(false);\n    }\n  }, []);\n\n  const onSubmit = (values, props) => {\n    if (update) {\n      values.id = id;\n      values.mobile = String(values.mobile);\n      dispatch(updateUser(values));\n      navigate(\"/\");\n    } else {\n      values.id = users?.length > 0 ? users[users.length - 1].id + 1 : 1;\n      values.mobile = String(values.mobile);\n      dispatch(addUser(values));\n      navigate(\"/\");\n    }\n  };\n\n  return (\n    <>\n      <Userform userobj={userobj} onSubmit={onSubmit} update={update} />\n    </>\n  );\n}\n\nexport default Addandupdate;\n"],"names":["validationSchema","Yup","shape","name","min","max","required","email","mobile","username","roleKey","password","_ref","userobj","onSubmit","update","_jsxs","className","children","_jsx","Formik","initialValues","props","Form","htmlFor","Field","type","id","placeholder","ErrorMessage","component","class","as","value","useParams","dispatch","useDispatch","navigate","useNavigate","users","useSelector","state","_useState","useState","_useState2","_slicedToArray","setUpdate","_useState3","_useState4","useEffect","foundUser","find","user","_Fragment","Userform","values","String","updateUser","length","addUser"],"sourceRoot":""}